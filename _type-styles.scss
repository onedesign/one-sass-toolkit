@import "map-deep-get";
@import "font-smoothing";
@import 'fluid-type';

//===============================================================
// Type Styles
//===============================================================
/*
  Utility that automatically generates all of the type styles
  for a project. Relies on $type-styles and $font-stacks map variables existing in the following format:
*/

$font-stacks: (
  serif: (Georgia, Times, "Times New Roman", serif),
  sans-serif: ('Helvetica Neue', Helvetica, Arial, sans-serif)
) !default;

$fluid-min-screen: 320px !default;
$fluid-max-wcreen: 1440px !default;

$type-styles: (
  heading: (
    stack: sans-serif,
    smoothing: true,
    sizes: (24, 36),
    properties: (
      line-height: 1.4,
      text-transform: normal,
      letter-spacing: 0
    )
  ),

  body: (
    stack: serif,
    sizes: (16),
    properties: (
      line-height: 1.6,
      text-transform: normal,
      letter-spacing: 0,
    )
  )
) !default;


//---------------------------------------------------------------
// Get Style Map
//---------------------------------------------------------------
/*
  Function for getting a specific style map from within the $type-styles map
  @param $key (string)  - Key style you want
  @param $map (map)     - Map to search for $key [$font-stacks]
*/
@function get-style-map($key, $map) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  } @else {
    @warn "Key #{$key} doesn't exist in map #{$map}";
  }
}


//---------------------------------------------------------------
// Font Stack Styles
//---------------------------------------------------------------
/*
  Generates font styles related to a specific font-stack.
  @param $key (string)  - Key to find in $map
  @param $map (map)     - Map to search for $key [$font-stacks]
*/
@mixin font-stack-styles($key, $map: $font-stacks) {
  @if map_has_key($map, $key) {
    font-family: map-get($map, $key);
  }
}

//---------------------------------------------------------------
// Type Styles
//---------------------------------------------------------------
/*
  Generate font-family and typesize styles across breakpoints.
  @param $key (string)   - Should be a top level key from the $type-styles map
  @param $map (map)      - Map to search for $key [$font-stacks]
*/
@mixin type-style($key, $fluid: true, $map: $type-styles) {
  $map-style: get-style-map($key, $map);

  // Set font-family
  @include font-stack-styles(map-get($map-style, 'stack'));

  // Get our sizes list
  $map-sizes: map-get($map-style, 'sizes');

  // Set the default to be the first value
  $default: nth($map-sizes, 1);

  // If the map is longer than 1 item and if the fluid option is set to true
  @if length($map-sizes) > 1 and $fluid {
    // Interpolate
    @include fluid-type(
      'font-size',
      $fluid-min-screen,
      $fluid-max-wcreen,
      ($default * 1px),
      nth($map-sizes, -1) * 1px
    );
  } @else {
    // Otherwise just output font-size
   font-size: ($default / 10) * 1rem;
  }

  // Font smoothing?
  @if map_has_key($map, $key) and map-get($map-style, smoothing)  {
    @include font-smoothing();
  }


  // Set arbitrary properties
  @if map_has_key($map-style, 'properties') {
    @each $property, $value in map-get($map-style, 'properties') {
      #{$property}: $value;
    }
  }
}


//---------------------------------------------------------------
// Output Helper Classes
//---------------------------------------------------------------
/*
  Loop through the $type-styles map (defined in `_base/variables.scss`)
  and generate helpers classes we can use to apply directly into our
  template markup.
*/

$output-type-helpers: true !default;

@if $output-type-helpers {
  @each $class in map-keys($type-styles) {
    .h-type-#{$class} {
      @include type-style($class);
    }
  }
}
